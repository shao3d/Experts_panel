#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Railway
"""

import os
import psycopg2
import sys
from pathlib import Path

def get_postgres_connection(db_url: str) -> psycopg2.extensions.connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(db_url)

def apply_migration(pg_conn: psycopg2.extensions.connection, migration_path: str):
    """–ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–Ω—É –º–∏–≥—Ä–∞—Ü–∏—é"""
    migration_name = Path(migration_path).name

    try:
        with open(migration_path, 'r', encoding='utf-8') as f:
            migration_sql = f.read()

        cursor = pg_conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω—è–ª–∞—Å—å –ª–∏ —É–∂–µ —ç—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏—è
        cursor.execute("""
            SELECT COUNT(*) FROM applied_migrations WHERE migration_name = %s
        """, (migration_name,))

        if cursor.fetchone()[0] > 0:
            print(f"  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_name} —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        cursor.execute(migration_sql)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        cursor.execute("""
            INSERT INTO applied_migrations (migration_name, applied_at)
            VALUES (%s, NOW())
        """, (migration_name,))

        pg_conn.commit()
        print(f"  ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration_name} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration_name}: {e}")
        pg_conn.rollback()
        raise

def ensure_migration_table(pg_conn: psycopg2.extensions.connection):
    """–°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
    cursor = pg_conn.cursor()

    try:
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS applied_migrations (
                id SERIAL PRIMARY KEY,
                migration_name VARCHAR(255) UNIQUE NOT NULL,
                applied_at TIMESTAMP DEFAULT NOW()
            )
        """)
        pg_conn.commit()
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –º–∏–≥—Ä–∞—Ü–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        pg_conn.rollback()
        raise

def apply_migrations():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv("DATABASE_URL")

    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATABASE_URL –¥–ª—è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        sys.exit(1)

    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ PostgreSQL")
    print(f"   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {database_url.split('@')[1] if '@' in database_url else 'PostgreSQL'}")
    print()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        pg_conn = get_postgres_connection(database_url)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π
        ensure_migration_table(pg_conn)
        print()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–π
        migrations_dir = Path("migrations")
        migration_files = sorted([
            f for f in migrations_dir.glob("*.sql")
            if f.name.startswith(("00", "01", "02", "03", "04", "05", "06", "07"))
        ])

        if not migration_files:
            print("‚ùå –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ migrations/")
            sys.exit(1)

        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –º–∏–≥—Ä–∞—Ü–∏–π: {len(migration_files)}")

        for migration_file in migration_files:
            print(f"üìã –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: {migration_file.name}")
            apply_migration(pg_conn, str(migration_file))
            print()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        pg_conn.close()

        print("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π: {e}")
        sys.exit(1)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç"""
    print("=" * 60)
    print("üîÑ –ü–†–ò–ú–ï–ù–ï–ù–ò–ï –ú–ò–ì–†–ê–¶–ò–ô POSTGRESQL")
    print("=" * 60)
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python apply_postgres_migrations.py")
        print()
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("  DATABASE_URL      - URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)")
        print()
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  DATABASE_URL=postgresql://user:pass@host:port/dbname python apply_postgres_migrations.py")
        print()
        print("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:")
        print("  –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ migrations/")
        print("  –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ applied_migrations")
        return

    apply_migrations()

if __name__ == "__main__":
    main()