#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite –≤ PostgreSQL –¥–ª—è Railway –¥–µ–ø–ª–æ—è
"""

import os
import sqlite3
import psycopg2
from psycopg2.extras import execute_values
from datetime import datetime
import json
from typing import List, Dict, Any
import sys

def get_sqlite_connection(db_path: str) -> sqlite3.Connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return sqlite3.connect(db_path)

def get_postgres_connection(db_url: str) -> psycopg2.extensions.connection:
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    return psycopg2.connect(db_url)

def copy_table_data(sqlite_conn: sqlite3.Connection, pg_conn: psycopg2.extensions.connection,
                   table_name: str, column_mapping: Dict[str, str] = None):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã SQLite –≤ PostgreSQL"""

    cursor = pg_conn.cursor()

    try:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        cursor.execute(f"TRUNCATE TABLE {table_name} CASCADE")
        pg_conn.commit()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute(f"SELECT * FROM {table_name}")
        rows = sqlite_cursor.fetchall()

        if not rows:
            print(f"  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ {table_name} –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω –∫–æ–ª–æ–Ω–æ–∫
        columns = [description[0] for description in sqlite_cursor.description]

        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ –∫–æ–ª–æ–Ω–æ–∫ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if column_mapping:
            columns = [column_mapping.get(col, col) for col in columns]

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞
        placeholders = ', '.join(['%s'] * len(columns))
        sql = f"INSERT INTO {table_name} ({', '.join(columns)}) VALUES ({placeholders})"

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        execute_values(cursor, sql, rows)
        pg_conn.commit()

        print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É {table_name}")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã {table_name}: {e}")
        pg_conn.rollback()
        raise

def copy_posts(sqlite_conn: sqlite3.Connection, pg_conn: psycopg2.extensions.connection):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã posts —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON –ø–æ–ª–µ–π"""

    cursor = pg_conn.cursor()

    try:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("TRUNCATE TABLE posts CASCADE")
        pg_conn.commit()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute("""
            SELECT post_id, telegram_message_id, text, author, created_at,
                   channel_id, channel_username, expert_id
            FROM posts
        """)
        rows = sqlite_cursor.fetchall()

        if not rows:
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ posts –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        processed_rows = []
        for row in rows:
            post_id, telegram_message_id, text, author, created_at, channel_id, channel_username, expert_id = row
            processed_rows.append((
                post_id,
                telegram_message_id,
                text,
                author,
                created_at,
                channel_id,
                channel_username,
                expert_id
            ))

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        sql = """
            INSERT INTO posts (post_id, telegram_message_id, text, author, created_at,
                             channel_id, channel_username, expert_id)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)
        """
        execute_values(cursor, sql, processed_rows)
        pg_conn.commit()

        print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(processed_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É posts")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã posts: {e}")
        pg_conn.rollback()
        raise

def copy_comment_group_drift(sqlite_conn: sqlite3.Connection, pg_conn: psycopg2.extensions.connection):
    """–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã comment_group_drift —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON –ø–æ–ª–µ–π"""

    cursor = pg_conn.cursor()

    try:
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("TRUNCATE TABLE comment_group_drift")
        pg_conn.commit()

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ SQLite
        sqlite_cursor = sqlite_conn.cursor()
        sqlite_cursor.execute("""
            SELECT post_id, has_drift, drift_topics, analyzed_at, analyzed_by, expert_id
            FROM comment_group_drift
        """)
        rows = sqlite_cursor.fetchall()

        if not rows:
            print("  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ comment_group_drift –ø—É—Å—Ç–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π JSON
        processed_rows = []
        for row in rows:
            post_id, has_drift, drift_topics_json, analyzed_at, analyzed_by, expert_id = row

            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –∏–∑ SQLite
            drift_topics = json.loads(drift_topics_json) if drift_topics_json else None

            processed_rows.append((
                post_id,
                has_drift,
                json.dumps(drift_topics) if drift_topics else None,
                analyzed_at,
                analyzed_by,
                expert_id
            ))

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        sql = """
            INSERT INTO comment_group_drift (post_id, has_drift, drift_topics, analyzed_at, analyzed_by, expert_id)
            VALUES (%s, %s, %s, %s, %s, %s)
        """
        execute_values(cursor, sql, processed_rows)
        pg_conn.commit()

        print(f"  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ {len(processed_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É comment_group_drift")

    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã comment_group_drift: {e}")
        pg_conn.rollback()
        raise

def sync_database():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    sqlite_path = os.getenv("SQLITE_DB_PATH", "data/experts.db")
    database_url = os.getenv("DATABASE_URL")

    if not database_url:
        print("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ DATABASE_URL –¥–ª—è PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        sys.exit(1)

    if not os.path.exists(sqlite_path):
        print(f"‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {sqlite_path}")
        sys.exit(1)

    print(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é SQLite ‚Üí PostgreSQL")
    print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {sqlite_path}")
    print(f"   –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {database_url.split('@')[1] if '@' in database_url else 'PostgreSQL'}")
    print()

    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        sqlite_conn = get_sqlite_connection(sqlite_path)
        pg_conn = get_postgres_connection(database_url)

        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print()

        # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—É—á–∏—Ç—ã–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏)
        tables_to_copy = [
            ("posts", copy_posts),
            ("links", None),  # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            ("comments", None),  # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            ("sync_state", None),  # –ü—Ä–æ—Å—Ç–∞—è —Ç–∞–±–ª–∏—Ü–∞
            ("comment_group_drift", copy_comment_group_drift),  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ JSON
        ]

        for table_name, copy_function in tables_to_copy:
            print(f"üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {table_name}")

            if copy_function:
                copy_function(sqlite_conn, pg_conn)
            else:
                copy_table_data(sqlite_conn, pg_conn, table_name)

            print()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        sqlite_conn.close()
        pg_conn.close()

        print("üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("   –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π –Ω–∞ Railway")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        sys.exit(1)

def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∫—Ä–∏–ø—Ç"""
    print("=" * 60)
    print("üîÑ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø SQLITE ‚Üí POSTGRESQL")
    print("=" * 60)
    print()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help"]:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python sync_to_postgres.py")
        print()
        print("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("  SQLITE_DB_PATH    - –ø—É—Ç—å –∫ SQLite —Ñ–∞–π–ª—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: data/experts.db)")
        print("  DATABASE_URL      - URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)")
        print()
        print("–ü—Ä–∏–º–µ—Ä:")
        print("  DATABASE_URL=postgresql://user:pass@host:port/dbname python sync_to_postgres.py")
        return

    sync_database()

if __name__ == "__main__":
    main()